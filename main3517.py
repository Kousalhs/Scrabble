from classes import Game


def guidelines():
    """
                                                        Σκραμπλ
        -
          *SakClass: Κλάση υπεύθυνη για τις ενέργειες για το σακουλάκι και τον παίκτη.
        Επίσης, περιέχει το dictionary των γραμμάτων με τα βάρη και το σύνολο από κάθε γράμμα. Οι συναρτήσεις είναι
        ίδιες με αυτές στον οδηγό της εργασίας.
          *Player: Μητέρα abstract class που κληρονομούν υπολογιστής και άνθρωπος. Δηλώνεται η μέθοδος play την
        οποία κάνουν override ο υπολογιστής και ο άνθρωπος (απόγονες κλάσεις).
          *Game: Βασική κλάση υπεύθυνη για τη λειτουργία του παιχνιδιού. Παρέχει μεθόδους για το τρέξιμο του
          προγράμματος, τον έλεγχο και τα αποτελέσματα μετά το παιχνίδι.
          *Συναρτήσεις:
             -run(): "Τρέχει" το παιχνίδι. Έλεγχος της δοσμένης λέξης, έλεγχος για αν πάει ο παίκτης πάσο,
             οι αλγόριθμοι play -> γίνονται μέσα σε μια επανάληψη while, όπου ελέγχονται τα απαραίτητα κριτήρια για να
             συνεχίζεται το παιχνίδι. Στο τέλος κάθε επανάληψης, αποθηκεύονται τα σκορ των παικτών.
             -MakeValidWordDictionary(): Διαβάζει από το αρχείο greek7.txt τις αποδεκτές λέξεις και τις
             αποθηκεύει σε dictionary.
             -CreatePlayers(): Δημιουργεί 2 αντικείμενα τύπου Player (Computer και Human αντίστοιχα).
          *Computer: Κληρονομεί από τη μητέρα κλάση Player και υλοποιεί τη δική της εκδοχή της συνάρτησης play με τον
        αλγόριθμο του σεναρίου.
          *Μέθοδος play -> αλγόριθμος 1:
        ΜΙΝ - ΜΑΧ - SMART (ΑΕΜ:3517): Για την υλοποίηση του αλγορίθμου MIN βρίσκουμε επαναληπτικά τις μεταθέσεις
        από τη μικρότερη στη μεγαλύτερη και επιστρέφουμε την πρώτη μετάθεση που αντιστοιχεί σε λέξη.
        Για το ΜΑΧ έχουμε παρόμοια διαδικασία με την επανάληψη να τρέχει από τη μεγαλύτερη μετάθεση στη
        μικρότερη. Όμοια για τον SMART έχει προστεθεί έλεγχος στο τέλος κάθε επαναληπτικής διαδικασίας ώστε
        να ελέγχεται αν η έγκυρη λέξη είναι και η μεγαλύτερη σε αξία, ώστε να βρίσκεται η βέλτιστη λύση.
          *Human: Κληρονομεί από τη μητέρα κλάση Player και υλοποιεί τη δική του εκδοχή της συνάρτησης play.
        Main: Η κλάση που είναι υπεύθυνη για την εμφάνιση του μενού, την επιλογή ρυθμίσεων και τη δημιουργία
         αντικειμένου τύπου Game.
        Δομές που χρησιμοποιήθηκαν : Λεξικό/γράμματα/πλήθος και αξία γραμμάτων -> dictionary, όπου η μέση
        πολυπλοκότητα προσπέλασης είναι Ο[1].
        -
        Απαραίτητα αρχεία για τη σωστή λειτουργία είναι:
        main3517.py
        classes.py
        greek7.txt
        scores.json(έχει ήδη κάποια entries μετά απο testing, τα νέα σκορ θα προστεθούν στο ήδη υπάρχον αρχείο)
    """

    pass


def Menu():

    print("                         *** SCRABBLE ***")
    print("                             -ΚΑΝΟΝΕΣ-")
    print("    -Παίζουμε μόνο με κεφαλαία Ελληνικά γράμματα!")
    print("    -Όταν εισαχθεί χαρακτήρας όπως το κενό ή γράμμα το οποίο δεν υπάρχει στα διαθέσιμα γράμματα του παίκτη, "
          "δίνεται η επιλογή επαναπροσπάθειας είτε πάσο είτε τερματισμός του παιχνιδιού.")
    print("    -Ο υπολογιστής έχει σαν default αλγόριθμο τον Min!")
    print("                             -ΚΑΝΟΝΕΣ-")
    print("\n    -Διάλεξε ανάμεσα στις επιλογές q-3.. ")
    print("         q:Exit \n         1:Game\n         2:Options \n         3:Score")


class Main():

    def UserInput(self):
        userInput = input()
        gameMode = 'min'
        if userInput == 'q':
            print("=================================\nΤέλος παιχνιδιού")
            exit()
        elif userInput == str('1'):
            game = Game('Άνθρωπος', gameMode)
            game.run()
        elif userInput == str('2'):
            modeSelection = input("Επέλεξε τον τρόπο παιχνιδιού του υπολογιστή, πληκτρολογώντας τον ανάλογο αριθμό \n "
                                  "1.Smart \n 2.Min \n 3.Max "
                                  "\n")
            if modeSelection == str('1'):
                gameMode = 'smart'
            elif modeSelection == str('2'):
                gameMode = 'min'
            elif modeSelection == str('3'):
                gameMode = 'max'
            else:
                print("Λάθος τιμή!")
            print("Παιχνίδι σε {} mode".format(gameMode))
            game = Game('Άνθρωπος', gameMode)
            game.run()
        elif userInput == str('3'):
            Game.RetrieveScores()
            Menu()
            Main.UserInput(self)
        else:
            print('Λάθος τιμή! Προσπάθησε ξανά!')
            Menu()
            Main.UserInput(self)


if __name__ == "__main__":
    main = Main()
    Menu()
    main.UserInput()
